{
	"name": "DBConections",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "vcaSparkpool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "6389da19-28c1-460c-b48f-8478ebb16e7a"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_spark",
				"display_name": "Synapse Spark"
			},
			"language_info": {
				"name": "scala"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/f98c40cb-c627-4c43-9ac4-d10bb7b42e04/resourceGroups/RG_MASTER_OCT22_GROUP10/providers/Microsoft.Synapse/workspaces/synpasevca/bigDataPools/vcaSparkpool",
				"name": "vcaSparkpool",
				"type": "Spark",
				"endpoint": "https://synpasevca.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/vcaSparkpool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.2",
				"nodeCount": 10,
				"cores": 8,
				"memory": 56,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "scala"
					}
				},
				"source": [
					"%%spark \r\n",
					"import java.sql.DriverManager \r\n",
					"/** this JDBC url could be copied from Azure portal > Azure SQL database > Connection strings > JDBC **/ \r\n",
					"val url = s\"jdbc:sqlserver://tchivedatabase.database.windows.net:1433;database=tchivedatabase;user=sysadmin;password=admin1234-;encrypt=true;trustServerCertificate=false;hostNameInCertificate=*.database.windows.net;loginTimeout=30;\" \r\n",
					"try { \r\n",
					"    val connection = DriverManager.getConnection(url) \r\n",
					"    val result = connection.createStatement().executeQuery(\"select t.SCHEMA_VERSION from VERSION t\") \r\n",
					"    result.next(); \r\n",
					"    println(s\"Successful to test connection. Hive Metastore version is ${result.getString(1)}\") \r\n",
					"} catch { \r\n",
					"    case ex: Throwable => println(s\"Failed to establish connection:\\n $ex\") \r\n",
					"}"
				],
				"execution_count": 2
			}
		]
	}
}