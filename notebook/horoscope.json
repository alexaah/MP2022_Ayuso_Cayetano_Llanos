{
	"name": "horoscope",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "vcaSparkpool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "239d683a-3909-4c82-be03-1bcaf0f8d25c"

			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "scala"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/f98c40cb-c627-4c43-9ac4-d10bb7b42e04/resourceGroups/RG_MASTER_OCT22_GROUP10/providers/Microsoft.Synapse/workspaces/synpasevca/bigDataPools/vcaSparkpool",
				"name": "vcaSparkpool",
				"type": "Spark",
				"endpoint": "https://synpasevca.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/vcaSparkpool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.2",
				"nodeCount": 10,
				"cores": 8,
				"memory": 56,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"var horoscope = spark.sqlContext.read.option(\"header\", \"true\").csv(\"abfss://synpasevca@synpasevca.dfs.core.windows.net/horoscope.csv\")\r\n",
					"display(horoscope)"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"var horoscope_sign = horoscope.select(\"sign\",\"date_range\")\r\n",
					"display(horoscope_sign)"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"import org.apache.spark.sql.functions.split\r\n",
					"var horoscope_dates = horoscope_sign.select($\"sign\",\r\n",
					"split($\"date_range\",\" - \")(0).alias(\"date1\"),\r\n",
					"split($\"date_range\",\" - \")(1).alias(\"date2\")).distinct()\r\n",
					"display(horoscope_dates)"
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"var horoscope_clean = horoscope_dates.withColumn(\"date1\",date_format(to_date(col(\"date1\"),\"MMM dd\"), \"dd/MM\")).withColumn(\"date2\",date_format(to_date(col(\"date2\"),\"MMM dd\"), \"dd/MM\"))\r\n",
					"display(horoscope_clean)"
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"horoscope_clean.printSchema"
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import org.apache.spark.sql.DataFrame\r\n",
					"import java.util.Date\r\n",
					"import java.text.SimpleDateFormat\r\n",
					"\r\n",
					"def getSign(date: Date, df: DataFrame) : String = {\r\n",
					"\r\n",
					"    val format = new java.text.SimpleDateFormat(\"dd/MM\")\r\n",
					"\r\n",
					"    val outputFormat = new SimpleDateFormat(\"dd/MM\")\r\n",
					"\r\n",
					"\r\n",
					"    var dateString = outputFormat.format(date)\r\n",
					"\r\n",
					"    var dateFormat = format.parse(dateString)\r\n",
					"\r\n",
					"    var dffilter = df.filter(line => (dateFormat.after(format.parse(line.getString(1))) || dateFormat.equals(format.parse(line.getString(1)))) && dateFormat.before(format.parse(line.getString(2))))\r\n",
					"\r\n",
					"     return dffilter.head.get(0).toString\r\n",
					"}"
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"val format = new java.text.SimpleDateFormat(\"dd/MM/yyyy\")\r\n",
					"var date = format.parse(\"21/04/2022\")\r\n",
					"getSign(date,horoscope_clean)"
				],
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import org.apache.spark.sql.Column\r\n",
					"def getSignCol(col: Column, df: DataFrame) : String = {\r\n",
					"\r\n",
					"    val format = new java.text.SimpleDateFormat(\"dd/MM\")\r\n",
					"\r\n",
					"    val outputFormat = new SimpleDateFormat(\"dd/MM\")\r\n",
					"\r\n",
					"\r\n",
					"    var dateString = outputFormat.format(col)\r\n",
					"\r\n",
					"    var dateFormat = format.parse(dateString)\r\n",
					"\r\n",
					"    var dffilter = df.filter(line => dateFormat.after(format.parse(line.getString(1))) && dateFormat.before(format.parse(line.getString(2))))\r\n",
					"\r\n",
					"     return dffilter.head.get(0).toString\r\n",
					"}"
				],
				"execution_count": 8
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"horoscope_clean.printSchema"
				],
				"execution_count": 9
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def getDate(dateString : String) : Date = {\r\n",
					"\r\n",
					"    val format = new java.text.SimpleDateFormat(\"dd/MM\")\r\n",
					"\r\n",
					"    return format.parse(dateString)\r\n",
					"}"
				],
				"execution_count": 10
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"var horoscope_clean_date = horoscope_clean.withColumn(\"date1\", to_date(col(\"date1\"), \"dd/MM\")).withColumn(\"date2\", to_date(col(\"date2\"), \"dd/MM\"))\r\n",
					"display(horoscope_clean_date)"
				],
				"execution_count": 34
			}
		]
	}
}